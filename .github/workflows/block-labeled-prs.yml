name: Block PR if Tasks Are Open

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  pull_request_review:
    types: [submitted, edited, dismissed]
  issue_comment:
    types: [created, edited, deleted]

jobs:
  check-tasks:
    runs-on: ubuntu-latest

    permissions:
      contents: read            # to list/create repo labels
      issues: write             # to add/remove issue labels
      statuses: write           # to create commit statuses
      pull-requests: write      # to fetch PR data

    steps:
      - name: Check for open tasks, manage label & publish status
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request || context.payload.issue?.pull_request;
            if (!pr) return;                       // not a PR event
            const { owner, repo } = context.repo;
            const pull_number = pr.number;
            const labelName  = "Blocked by task";
            const labelColor = "d73a4a";
            const labelDesc  = "PR is blocked because of an open task";

            // ─── 1) Bootstrap the repo label ─────────────────────────────────────
            const { data: repoLabels } = await github.rest.issues.listLabelsForRepo({ owner, repo, per_page: 100 });
            if (!repoLabels.some(l => l.name === labelName)) {
              await github.rest.issues.createLabel({ owner, repo, name: labelName, color: labelColor, description: labelDesc });
            }

            // ─── 2) Get the latest PR description ─────────────────────────────────
            const { data: prData } = await github.rest.pulls.get({ owner, repo, pull_number });
            const hasOpenTasks = /- \[ \]/.test(prData.body || "");

            // ─── 3) Add/remove the label on the PR ────────────────────────────────
            const { data: issueLabels } = await github.rest.issues.listLabelsOnIssue({
              owner, repo, issue_number: pull_number
            });
            const hasLabel = issueLabels.some(l => l.name === labelName);

            if (hasOpenTasks) {
              if (!hasLabel) {
                await github.rest.issues.addLabels({ owner, repo, issue_number: pull_number, labels: [labelName] });
              }
            } else {
              if (hasLabel) {
                await github.rest.issues.removeLabel({ owner, repo, issue_number: pull_number, name: labelName });
              }
            }

            // ─── 4) Publish a commit status on the PR’s HEAD SHA ──────────────────
            const sha = prData.head.sha;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state:   hasOpenTasks ? "failure" : "success",
              context: labelName,
              description: hasOpenTasks
                ? "❌ There are incomplete tasks in the PR."
                : "✅ All tasks are complete."
            });

            // ─── 5) Fail the Action if there are open tasks ───────────────────────
            if (hasOpenTasks) {
              core.setFailed("❌ PR has open tasks. Please complete all tasks before merging.");
            }
